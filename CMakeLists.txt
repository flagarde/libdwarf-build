cmake_minimum_required(VERSION 3.11 FATAL_ERROR)

project(libdwarf-build LANGUAGES NONE)

cmake_policy(SET CMP0074 NEW)

find_package(Git REQUIRED)

include(FetchContent)

set(ZLIB_URL "https://github.com/zlib-ng/zlib-ng.git")
set(ZLIB_TAG "2.1.6")
FetchContent_Declare(zlib GIT_REPOSITORY "${ZLIB_URL}" GIT_TAG "${ZLIB_TAG}"  GIT_SHALLOW 1)

FetchContent_GetProperties(zlib)
if(NOT zlib_POPULATED)
  FetchContent_Populate(zlib)
  set(WITH_GZFILEOP ON)
  set(ZLIB_COMPAT ON)
  set(ZLIB_ENABLE_TESTS OFF)
  set(ZLIBNG_ENABLE_TESTS OFF)
  set(WITH_GTEST OFF)
  set(WITH_FUZZERS OFF)
  set(WITH_BENCHMARKS OFF)
  set(WITH_BENCHMARK_APPS OFF)
  set(WITH_OPTIM OFF)
  set(WITH_REDUCED_MEM ON)
  set(WITH_NEW_STRATEGIES ON)
  set(WITH_NATIVE_INSTRUCTIONS ON)
  set(WITH_MAINTAINER_WARNINGS OFF)
  set(WITH_CODE_COVERAGE OFF)
  set(WITH_INFLATE_STRICT OFF)
  set(WITH_INFLATE_ALLOW_INVALID_DIST OFF)
  set(WITH_UNALIGNED ON)
  set(OLD_BUILD_SHARED_LIBS "${BUILD_SHARED_LIBS}")
  set(BUILD_SHARED_LIBS OFF)
  set(SKIP_INSTALL_FILES NO)
  set(SKIP_INSTALL_ALL NO)
  #set(CMAKE_POSITION_INDEPENDENT_CODE ON) for libdwarf.so
  add_subdirectory("${zlib_SOURCE_DIR}" "${zlib_BINARY_DIR}")
  set(BUILD_SHARED_LIBS "${OLD_BUILD_SHARED_LIBS}")
endif()

if(TARGET zlibstatic)
  add_library(ZLIB::ZLIB ALIAS zlib)
  set(ZLIB_FOUND TRUE)
endif()

set(ZSTD_URL "https://github.com/facebook/zstd.git")
set(ZSTD_TAG "v1.5.5")
FetchContent_Declare(zstd GIT_REPOSITORY "${ZSTD_URL}" GIT_TAG "${ZSTD_TAG}"  GIT_SHALLOW 1)
FetchContent_GetProperties(zstd)
if(NOT zstd_POPULATED)
  FetchContent_Populate(zstd)
  set(ZSTD_BUILD_PROGRAMS OFF)
  set(ZSTD_BUILD_CONTRIB OFF)
  set(ZSTD_BUILD_TESTS OFF)
  set(ZSTD_BUILD_STATIC ON)
  set(ZSTD_BUILD_SHARED OFF)
  set(ZSTD_LEGACY_SUPPORT OFF)
  add_subdirectory("${zstd_SOURCE_DIR}/build/cmake" "${zstd_BINARY_DIR}")
endif()

if(TARGET libzstd_static)
  add_library(ZSTD::ZSTD ALIAS libzstd_static)
  set(ZSTD_FOUND TRUE)
endif()

set(LIBDWARF_URL "https://github.com/davea42/libdwarf-code.git")
set(LIBDWARF_TAG "main")
FetchContent_Declare(libdwarf GIT_REPOSITORY "${LIBDWARF_URL}" GIT_TAG "${LIBDWARF_TAG}" GIT_SHALLOW 1)
FetchContent_GetProperties(libdwarf)
if(NOT libdwarf_POPULATED)
  set(BUILD_DWARFDUMP FALSE)
  set(BUILD_SHARED FALSE)
  set(BUILD_DWARFGEN FALSE)
  set(BUILD_DWARFEXAMPLE FALSE)
  set(DO_TESTING FALSE)
  set(ENABLE_DECOMPRESSION TRUE)
  FetchContent_Populate(libdwarf)
  add_subdirectory("${libdwarf_SOURCE_DIR}" "${libdwarf_BINARY_DIR}")
endif()

